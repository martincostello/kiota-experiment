// <auto-generated/>
#pragma warning disable CS0618
using KiotaExperiment.Client.Time;
using KiotaExperiment.Client.Tools;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Json;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace KiotaExperiment.Client
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiClient : BaseRequestBuilder
    {
        /// <summary>The time property</summary>
        public global::KiotaExperiment.Client.Time.TimeRequestBuilder Time
        {
            get => new global::KiotaExperiment.Client.Time.TimeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tools property</summary>
        public global::KiotaExperiment.Client.Tools.ToolsRequestBuilder Tools
        {
            get => new global::KiotaExperiment.Client.Tools.ToolsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaExperiment.Client.ApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.martincostello.com";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
